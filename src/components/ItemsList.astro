---
import { Image } from "astro:assets";
---

<style>
  #hover-element {
    width: 400px;
    height: 78px;
  }
</style>
<ul class="absolute
  z-400
  left-[40vw]
  sm:left-[28vw]
  md:left-[18vw]
  xl:left-[25vw]
  2xl:left-[30vw]
  top-[35vh]
  flex
  flex-col
  conatiner">
  <svg
    id="hover-element"
    class="absolute z-40 transition-all"
    viewBox="0 0 100 50"
    preserveAspectRatio="none"
  >
    <polygon class="fill-[#ff0022]" points="10,20 80,20 80,30, 20,30">
      <animate attributeName="points" dur="1s" repeatCount="indefinite"
      ></animate>
    </polygon>
    <polygon
      class="mix-blend-screen fill-[#1cfeff]"
      points="30,10 90,30 100,35, 20,50"
    >
    <animate attributeName="points" dur="1.2s" repeatCount="indefinite"
    ></animate>
    </polygon>
  </svg>
  <li class="z-50">
    <Image class="hovered-element pl-16" src="/list-images/about_me.png" alt="About me" width={400} height={78} />
  </li>
  <li class="z-50">
    <Image class="hovered-element pr-24 -mt-4" data-is-large="true" src="/list-images/what_is_this.png" alt="What is this?" width={603} height={124} />
  </li>
  <li class="z-50">
    <Image class="hovered-element -mt-2 pl-24" src="/list-images/contact.png" alt="Contact" width={427} height={102} />
  </li>
    <li class="z-50">
    <Image class="hovered-element -mt-2 pl-12" src="/list-images/resume.png" alt="Resume" width={361} height={96} />
  </li>
</ul>

<script>
  // move animated element between items
  const images = document.querySelectorAll(
    ".hovered-element",
  ) as NodeListOf<HTMLImageElement>;
  const hoverElement = document.querySelector("#hover-element") as SVGElement;

  if (hoverElement) {
    images.forEach((image) => {
      const position = image.getBoundingClientRect();
      console.log(position);
      image.addEventListener("mouseenter", () => {
        hoverElement.style.width = `${position.width}px`;
        hoverElement.style.height = `${position.height}px`;
        if (image.dataset.isLarge) {
          hoverElement.style.transform = `translate(${position.left - 610}px, ${
            position.top - 305
          }px)`;
          return;
        }
        hoverElement.style.transform = `translate(${position.left - 500}px, ${
          position.top - 310
        }px)`;
      });
    });
  }
</script>
<script>
  const svgWidth = 100;
  const svgHeight = 50;

  const horizontalEdgePadding = 0;
  const verticalEdgePadding = 0;

  const horizontalCenterPadding = 20;
  const verticalCenterPadding = 5;
  const centerX = svgWidth / 2;
  const centerY = svgHeight / 2;
  const w = centerX - horizontalCenterPadding - horizontalEdgePadding;
  const h = centerY - verticalCenterPadding - verticalEdgePadding;

  const animatedElement = document.querySelectorAll("animate");

  const fixedNumber = (number: number) => number.toFixed(0);
  const getRandomPoints = () => {
    const x1 = fixedNumber(Math.random() * w + horizontalEdgePadding);
    const y1 = fixedNumber(Math.random() * h + verticalEdgePadding);

    const x2 = fixedNumber(
      Math.random() * w + centerX + horizontalCenterPadding,
    );
    const y2 = fixedNumber(Math.random() * h + verticalEdgePadding);

    const x3 = fixedNumber(
      Math.random() * w + centerX + horizontalCenterPadding,
    );
    const y3 = fixedNumber(Math.random() * h + centerY + verticalCenterPadding);

    const x4 = fixedNumber(Math.random() * w + horizontalEdgePadding);
    const y4 = fixedNumber(Math.random() * h + centerY + verticalCenterPadding);

    return `${x1},${y1} ${x2},${y2} ${x3},${y3} ${x4},${y4}`;
  };
  const generateValues = (defaultPoints: string) => {
    const points = Array.from({ length: 10 }, () => getRandomPoints());
    return `${defaultPoints}; ${points.join("; ")}; ${defaultPoints}`;
  };

  animatedElement.forEach((animate) => {
    const parentDefaultPoints = animate.parentElement?.getAttribute(
      "points",
    ) as string;
    console.log(animate);

    animate.setAttribute("values", generateValues(parentDefaultPoints));
  });
</script>
